name: Dependabot Manual Control

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        default: 'merge-all'
        type: choice
        options:
         - merge-all
         - rebase-all
         - close-all
         - list-pending
         - aggressive-cleanup
      dry_run:
        description: 'Dry run (no actual changes)'
        required: false
        default: false
        type: boolean

jobs:
  manual-control:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: List Dependabot PRs
        id: list-prs
        uses: actions/github-script@v7
        with:
          script: |
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              head: 'dependabot/npm_and_yarn'
            });
            
            const dependabotPRs = prs.filter(pr => 
              pr.user.login === 'dependabot[bot]' || 
              pr.head.ref.startsWith('dependabot/')
            );
            
            console.log(`Found ${dependabotPRs.length} Dependabot PRs`);
            
            for (const pr of dependabotPRs) {
              console.log(`- #${pr.number}: ${pr.title} (${pr.mergeable_state})`);
            }
            
            return {
              count: dependabotPRs.length,
              prs: dependabotPRs.map(pr => ({
                number: pr.number,
                title: pr.title,
                mergeable_state: pr.mergeable_state,
                mergeable: pr.mergeable
              }))
            };
            
      - name: Merge All PRs
        if: github.event.inputs.action == 'merge-all'
        uses: actions/github-script@v7
        with:
          script: |
             // Get fresh PR data instead of relying on step outputs
             const { data: prs } = await github.rest.pulls.list({
               owner: context.repo.owner,
               repo: context.repo.repo,
               state: 'open'
             });
             
             const dependabotPRs = prs.filter(pr => 
               pr.user.login === 'dependabot[bot]' || 
               pr.head.ref.startsWith('dependabot/')
             );
             
             const dryRun = '${{ github.event.inputs.dry_run }}' === 'true';
             
             console.log(`Processing ${dependabotPRs.length} Dependabot PRs (dry run: ${dryRun})`);
             
             const results = {
               attempted: 0,
               merged: 0,
               failed: 0,
               skipped: 0
             };
             
             for (const pr of dependabotPRs) {
               console.log(`\n=== Processing PR #${pr.number}: ${pr.title} ===`);
               console.log(`  - Created: ${pr.created_at}`);
               console.log(`  - Updated: ${pr.updated_at}`);
               console.log(`  - Head: ${pr.head.ref}`);
               console.log(`  - Base: ${pr.base.ref}`);
               
               // Get fresh PR data to ensure we have current merge status
               const { data: freshPR } = await github.rest.pulls.get({
                 owner: context.repo.owner,
                 repo: context.repo.repo,
                 pull_number: pr.number
               });
               
               console.log(`  - Fresh data - mergeable: ${freshPR.mergeable}, state: ${freshPR.mergeable_state}`);
               
               // Check if PR is too old (older than 30 days) and might be stale
               const prAge = new Date() - new Date(pr.created_at);
               const isOld = prAge > (30 * 24 * 60 * 60 * 1000); // 30 days in ms
               
               if (isOld) {
                 console.log(`  ‚ö†Ô∏è PR is ${Math.round(prAge / (24 * 60 * 60 * 1000))} days old - might be stale`);
               }
               
               // Try to merge regardless of mergeable status - let GitHub tell us
               results.attempted++;
               
               if (!dryRun) {
                 try {
                   console.log(`üîÑ Attempting to merge PR #${pr.number}...`);
                   
                   const mergeResult = await github.rest.pulls.merge({
                     owner: context.repo.owner,
                     repo: context.repo.repo,
                     pull_number: pr.number,
                     merge_method: 'squash',
                     commit_title: pr.title,
                     commit_message: 'Auto-merged by Dependabot automation'
                   });
                   
                   console.log(`‚úÖ Successfully merged PR #${pr.number}`);
                   console.log(`  - Merge SHA: ${mergeResult.data.sha}`);
                   results.merged++;
                   
                   // Delete the branch after successful merge
                   try {
                     await github.rest.git.deleteRef({
                       owner: context.repo.owner,
                       repo: context.repo.repo,
                       ref: `heads/${pr.head.ref}`
                     });
                     console.log(`üóëÔ∏è Deleted branch: ${pr.head.ref}`);
                   } catch (deleteError) {
                     console.log(`‚ö†Ô∏è Could not delete branch ${pr.head.ref}: ${deleteError.message}`);
                   }
                   
                 } catch (error) {
                   console.log(`‚ùå Failed to merge PR #${pr.number}: ${error.message}`);
                   results.failed++;
                   
                   // Provide detailed error information
                   if (error.status === 405) {
                     console.log(`  ‚Üí PR cannot be merged (405 error - likely conflicts or not ready)`);
                   } else if (error.status === 422) {
                     console.log(`  ‚Üí PR merge validation failed (422 error)`);
                     if (error.response?.data?.message) {
                       console.log(`  ‚Üí Details: ${error.response.data.message}`);
                     }
                   } else {
                     console.log(`  ‚Üí HTTP ${error.status}: ${error.message}`);
                   }
                   
                   // If merge fails due to conflicts, try to close the PR
                   if (error.status === 405 || error.status === 422) {
                     try {
                       await github.rest.pulls.update({
                         owner: context.repo.owner,
                         repo: context.repo.repo,
                         pull_number: pr.number,
                         state: 'closed'
                       });
                       console.log(`üîí Closed unmergeable PR #${pr.number}`);
                       
                       // Delete the branch for closed PRs too
                       try {
                         await github.rest.git.deleteRef({
                           owner: context.repo.owner,
                           repo: context.repo.repo,
                           ref: `heads/${pr.head.ref}`
                         });
                         console.log(`üóëÔ∏è Deleted branch: ${pr.head.ref}`);
                       } catch (deleteError) {
                         console.log(`‚ö†Ô∏è Could not delete branch ${pr.head.ref}: ${deleteError.message}`);
                       }
                     } catch (closeError) {
                       console.log(`‚ö†Ô∏è Could not close PR #${pr.number}: ${closeError.message}`);
                     }
                   }
                 }
               } else {
                 console.log(`[DRY RUN] Would attempt to merge PR #${pr.number}: ${pr.title}`);
               }
             }
             
             console.log(`\n=== SUMMARY ===`);
             console.log(`Total PRs processed: ${results.attempted}`);
             console.log(`Successfully merged: ${results.merged}`);
             console.log(`Failed to merge: ${results.failed}`);
             console.log(`Skipped: ${results.skipped}`);
            
      - name: Rebase All PRs
        if: github.event.inputs.action == 'rebase-all'
        uses: actions/github-script@v7
        with:
          script: |
             // Get fresh PR data instead of relying on step outputs
             const { data: prs } = await github.rest.pulls.list({
               owner: context.repo.owner,
               repo: context.repo.repo,
               state: 'open'
             });
             
             const dependabotPRs = prs.filter(pr => 
               pr.user.login === 'dependabot[bot]' || 
               pr.head.ref.startsWith('dependabot/')
             );
             
             const dryRun = '${{ github.event.inputs.dry_run }}' === 'true';
             
             console.log(`Rebasing ${dependabotPRs.length} Dependabot PRs (dry run: ${dryRun})`);
             
             for (const pr of dependabotPRs) {
               console.log(`Checking PR #${pr.number}: ${pr.title} (${pr.mergeable_state})`);
               
               if (pr.mergeable_state === 'dirty' || pr.mergeable_state === 'behind') {
                 if (!dryRun) {
                   try {
                     await github.rest.pulls.updateBranch({
                       owner: context.repo.owner,
                       repo: context.repo.repo,
                       pull_number: pr.number
                     });
                     console.log(`üîÑ Rebased PR #${pr.number}`);
                   } catch (error) {
                     console.log(`‚ùå Failed to rebase PR #${pr.number}: ${error.message}`);
                   }
                 } else {
                   console.log(`[DRY RUN] Would rebase PR #${pr.number}: ${pr.title}`);
                 }
               } else {
                 console.log(`‚è≠Ô∏è No rebase needed for PR #${pr.number}: ${pr.mergeable_state}`);
               }
             }
            
      - name: Close All PRs
        if: github.event.inputs.action == 'close-all'
        uses: actions/github-script@v7
        with:
          script: |
             // Get fresh PR data instead of relying on step outputs
             const { data: prs } = await github.rest.pulls.list({
               owner: context.repo.owner,
               repo: context.repo.repo,
               state: 'open'
             });
             
             const dependabotPRs = prs.filter(pr => 
               pr.user.login === 'dependabot[bot]' || 
               pr.head.ref.startsWith('dependabot/')
             );
             
             const dryRun = '${{ github.event.inputs.dry_run }}' === 'true';
             
             console.log(`Closing ${dependabotPRs.length} Dependabot PRs (dry run: ${dryRun})`);
             
             for (const pr of dependabotPRs) {
               console.log(`Processing PR #${pr.number}: ${pr.title}`);
               
               if (!dryRun) {
                 try {
                   await github.rest.pulls.update({
                     owner: context.repo.owner,
                     repo: context.repo.repo,
                     pull_number: pr.number,
                     state: 'closed'
                   });
                   console.log(`üîí Closed PR #${pr.number}`);
                 } catch (error) {
                   console.log(`‚ùå Failed to close PR #${pr.number}: ${error.message}`);
                 }
               } else {
                 console.log(`[DRY RUN] Would close PR #${pr.number}: ${pr.title}`);
               }
             }
            
      - name: Aggressive Cleanup
        if: github.event.inputs.action == 'aggressive-cleanup'
        uses: actions/github-script@v7
        with:
          script: |
            // Get all Dependabot PRs
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });
            
            const dependabotPRs = prs.filter(pr => 
              pr.user.login === 'dependabot[bot]' || 
              pr.head.ref.startsWith('dependabot/')
            );
            
            const dryRun = '${{ github.event.inputs.dry_run }}' === 'true';
            
            console.log(`Aggressive cleanup of ${dependabotPRs.length} Dependabot PRs (dry run: ${dryRun})`);
            
            for (const pr of dependabotPRs) {
              console.log(`\n=== Aggressive cleanup of PR #${pr.number}: ${pr.title} ===`);
              
              if (!dryRun) {
                // First, try to close the PR
                try {
                  await github.rest.pulls.update({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: pr.number,
                    state: 'closed'
                  });
                  console.log(`üîí Closed PR #${pr.number}`);
                } catch (error) {
                  console.log(`‚ùå Failed to close PR #${pr.number}: ${error.message}`);
                }
                
                // Then delete the branch
                try {
                  await github.rest.git.deleteRef({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    ref: `heads/${pr.head.ref}`
                  });
                  console.log(`üóëÔ∏è Deleted branch: ${pr.head.ref}`);
                } catch (error) {
                  console.log(`‚ö†Ô∏è Could not delete branch ${pr.head.ref}: ${error.message}`);
                }
              } else {
                console.log(`[DRY RUN] Would close PR #${pr.number} and delete branch ${pr.head.ref}`);
              }
            }
            
      - name: Summary
        run: |
          echo "## Dependabot PR Management Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Action**: ${{ github.event.inputs.action }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run**: ${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "- **PRs Found**: ${{ steps.list-prs.outputs.count || 'See logs above' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Check the logs above for detailed results." >> $GITHUB_STEP_SUMMARY
